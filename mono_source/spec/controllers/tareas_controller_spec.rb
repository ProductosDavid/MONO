=begin
    MONO
    Copyright (C) 2015  Universidad de los Andes
  
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
  
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
  
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
=end
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It     demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TareasController do
  login_user

  describe "POST update" do
    context "with valid attributes" do
      it "changes actualizar_tarea nombre" do
        tareaNew = FactoryGirl.create(:tarea)
        tareaUpdate = FactoryGirl.build(:tarea)
        get :actualizar_tarea, {:campo => "nombre", :id_tarea => tareaNew.id, :valor => tareaUpdate.nombre}
        tareaBD = Tarea.find_by_id(tareaNew.id)
        tareaBD.nombre.should eq(tareaUpdate.nombre)
      end

      it "changes actualizar_tarea descripcion" do
        tareaNew = FactoryGirl.create(:tarea)
        tareaUpdate = FactoryGirl.build(:tarea)
        get :actualizar_tarea, {:campo => "descripcion", :id_tarea => tareaNew.id, :valor => tareaUpdate.descripcion}
        tareaBD = Tarea.find_by_id(tareaNew.id)
        tareaBD.descripcion.should eq(tareaUpdate.descripcion)
      end

      it "changes actualizar_tarea estado" do
        tareaNew = FactoryGirl.create(:tarea)
        tareaUpdate = FactoryGirl.build(:tarea)
        get :actualizar_tarea, {:campo => "estado", :id_tarea => tareaNew.id, :valor => tareaUpdate.estado}
        tareaBD = Tarea.find_by_id(tareaNew.id)
        tareaBD.estado.should eq(tareaUpdate.estado)
      end

      it "changes actualizar_tarea prioridad" do
        tareaNew = FactoryGirl.create(:tarea)
        tareaUpdate = FactoryGirl.build(:tarea)
        get :actualizar_tarea, {:campo => "prioridad", :id_tarea => tareaNew.id, :valor => tareaUpdate.prioridad}
        tareaBD = Tarea.find_by_id(tareaNew.id)
        tareaBD.prioridad.should eq(tareaUpdate.prioridad)
      end

      it "changes actualizar_tarea duracion" do
        tareaNew = FactoryGirl.create(:tarea)
        tareaUpdate = FactoryGirl.build(:tarea)
        get :actualizar_tarea, {:campo => "duracion", :id_tarea => tareaNew.id, :valor => tareaUpdate.duracion}
        tareaBD = Tarea.find_by_id(tareaNew.id)
        tareaBD.duracion.should eq(tareaUpdate.duracion)
      end

      it "changes actualizar_tarea horas_planeadas" do
        tareaNew = FactoryGirl.create(:tarea)
        tareaUpdate = FactoryGirl.build(:tarea)
        get :actualizar_tarea, {:campo => "horas_planeadas", :id_tarea => tareaNew.id, :valor => tareaUpdate.horas_planeadas}
        tareaBD = Tarea.find_by_id(tareaNew.id)
        tareaBD.horas_planeadas.should eq(tareaUpdate.horas_planeadas)
      end

      it "changes actualizar_tarea fecha_inicio" do
        tareaNew = FactoryGirl.create(:tarea)
        tareaUpdate = FactoryGirl.build(:tarea)
        get :actualizar_tarea, {:campo => "fecha_inicio", :id_tarea => tareaNew.id, :valor => tareaUpdate.fecha_inicio}
        tareaBD = Tarea.find_by_id(tareaNew.id)
        tareaBD.fecha_inicio.should eq(tareaUpdate.fecha_inicio)
      end

      it "changes actualizar_tarea fecha_fin" do
        tareaNew = FactoryGirl.create(:tarea)
        tareaUpdate = FactoryGirl.build(:tarea)
        get :actualizar_tarea, {:campo => "fecha_fin", :id_tarea => tareaNew.id, :valor => tareaUpdate.fecha_fin}
        tareaBD = Tarea.find_by_id(tareaNew.id)
        tareaBD.fecha_inicio.should eq(tareaUpdate.fecha_fin)
      end

      it "changes actualizar_tarea hito" do
        tareaNew = FactoryGirl.create(:tarea)
        tareaUpdate = FactoryGirl.build(:tarea, hito: "true")
        get :actualizar_tarea, {:campo => "hito", :id_tarea => tareaNew.id, :valor => tareaUpdate.hito}
        tareaBD = Tarea.find_by_id(tareaNew.id)
        tareaBD.hito.should eq(tareaUpdate.hito)
      end

      it "redirects to actualizar_tarea" do
        tareaNew = FactoryGirl.create(:tarea)
        tareaUpdate = FactoryGirl.build(:tarea)
        get :actualizar_tarea, {:campo => "nombre", :id_tarea => tareaNew.id, :valor => tareaUpdate.nombre}
        response.should render_template(:text => "true")
      end
    end
  end
end
